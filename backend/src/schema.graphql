scalar DateTime

type SuccessMessage {
  message: String
}

type Query {
  me: User!
  today: Day
  allTime: [Day!]!
}

type Mutation {
  signup(email: String!, password: String!, name: String): AuthPayload!
  signin(email: String!, password: String!): AuthPayload!
  signout: SuccessMessage
  createCategory(name: String!): Category!
  updateCategory(id: ID!, name: String!): Category!
  deleteCategory(id: ID!): Category!
  createSession(length: Int, categoryId: ID!): Session!
  createDay(rating: Int, description: String!, taskForTomorrow: String): Day
  updateDay(
    id: ID!
    rating: Int!
    description: String!
    taskForTomorrow: String!
  ): Day
}

type AuthPayload {
  token: String!
  user: User!
}

type User {
  id: ID!
  email: String!
  password: String!
  name: String!
  categories: [Category!]!
  days: [Day!]!
}

type Day {
  id: ID!
  date: DateTime!
  user: User!
  rating: Int!
  description: String!
  taskForTomorrow: String!
}

type Category {
  id: ID!
  name: String!
  user: User!
  sessions: [Session!]!
}

type Session {
  id: ID!
  category: Category!
  length: Int!
  user: User!
  createdAt: DateTime!
}
